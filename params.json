{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Adds RESTFull API to your Yii application","body":"# RESTFullYii\r\n\r\nAdds RESTFul API to your Yii application.\r\n\r\nLets say you have a controller named 'PostController'. Your standard routes will look as they always do, ie /post/actionName .\r\n\r\nRESTFullYii adds a new set of RESTFul routes to your standard routes, but prepends '/api' .\r\n\r\nSo if you apply RESTFullYii to the 'PostController' you will get the following new routes by default (You can override their behavior in your controller).\r\n\r\n```\r\n[GET] http://yoursite.com/api/post/ (returns all posts)\r\n[GET] http://yoursite.com/api/post/1 (returns post with PK=1)\r\n[POST] http://yoursite.com/api/post/ (create new post)\r\n[PUT] http://yoursite.com/api/post/1 (update post with PK=1)\r\n[DELETE] http://yoursite.com/api/post/1 (delete post with PK=1)\r\n```\r\n\r\n## Requirements\r\n\r\nYii 1.8 or above\r\n\r\n## NEW\r\n* Now you can [Sub-Resource](#Sub-Resource) your 'many to many' Joins.\r\n* Use with javascript (See validateAjaxUser in ERestController)\r\n* Record count now included in JSON output \r\n* Query String filter/sort/limit/offset :\r\n\r\n```shell\r\n/api/post/?\r\nlimit=2&offset=1&sort=[{'property':'title','direction':'ASC'}]&filter=[{'property':'title', 'value':'some value'},{'property':'comment', 'value':'You need a REST'}]\r\n```\r\n\r\n* Save and display nested data sets:\r\n\r\n```json\r\n{\r\n    \"data\": {\r\n        \"presentation\": [\r\n            {\r\n            \t\"id\": \"41\", \r\n                \"author_email\": \"john.smith@somesite.com\", \r\n                \"author_name\": \"JSmith\", \r\n                \"description\": \"this is a great presentation\", \r\n                \"password\": \"12345\", \r\n                \"slides\": [\r\n                    {\r\n                        \"id\": \"17\",\r\n                        \"content\": \"c4\", \r\n                        \"created\": \"1347972285\", \r\n                        \"description\": \"d3\", \r\n                        \"image_id\": null, \r\n                        \"options\": null, \r\n                        \"title\": \"t35795\", \r\n                        \"updated\": \"1347972285\"\r\n                    }, \r\n                    {\r\n                    \t\"id\": \"18\", \r\n                        \"content\": \"c4\", \r\n                        \"created\": \"1347972285\", \r\n                        \"description\": \"d4\", \r\n                        \"image_id\": null, \r\n                        \"options\": null, \r\n                        \"title\": \"t45795\", \r\n                        \"updated\": \"1347972285\"\r\n                    }\r\n                ], \r\n                \"slug\": \"shoot123\", \r\n                \"title\": \"my present_test_2\", \r\n                \"updated\": \"1349289196\"\r\n            }\r\n        ], \r\n        \"totalCount\": \"2\"\r\n    }, \r\n    \"message\": \"Records Retrieved Successfully\", \r\n    \"success\": true\r\n}\r\n```\r\n\r\n## Installation\r\n\r\nPlace RESTFullYii into your 'protected/extensions' directory.\r\n\r\nThen, in your main.php config, add this code:\r\n\r\n```php\r\n'import' => array(\r\n  'ext.restfullyii.components.*',\r\n),\r\n```\r\n\r\nYou will need to add the routes below to your main.php. They should be added to the beginning of the rules array.\r\n\r\n```php\r\n\treturn array(\r\n\t\t'api/<controller:\\w+>'=>array('<controller>/restList', 'verb'=>'GET'),\r\n\t\t'api/<controller:\\w+>/<id:\\w*>'=>array('<controller>/restView', 'verb'=>'GET'),\r\n\t\t'api/<controller:\\w+>/<id:\\w*>/<var:\\w*>'=>array('<controller>/restView', 'verb'=>'GET'),\r\n\t\t'api/<controller:\\w+>/<id:\\w*>/<var:\\w*>/<var2:\\w*>'=>array('<controller>/restView', 'verb'=>'GET'),\r\n\t\t\r\n\t\tarray('<controller>/restUpdate', 'pattern'=>'api/<controller:\\w+>/<id:\\w*>', 'verb'=>'PUT'),\r\n\t\tarray('<controller>/restUpdate', 'pattern'=>'api/<controller:\\w+>/<id:\\w*>/<var:\\w*>', 'verb'=>'PUT'),\r\n\t\tarray('<controller>/restUpdate', 'pattern'=>'api/<controller:\\w*>/<id:\\w*>/<var:\\w*>/<var2:\\w*>', 'verb'=>'PUT'),\t\r\n\t\t\r\n\t\tarray('<controller>/restDelete', 'pattern'=>'api/<controller:\\w+>/<id:\\w*>', 'verb'=>'DELETE'),\r\n\t\tarray('<controller>/restDelete', 'pattern'=>'api/<controller:\\w+>/<id:\\w*>/<var:\\w*>', 'verb'=>'DELETE'),\r\n\t\tarray('<controller>/restDelete', 'pattern'=>'api/<controller:\\w+>/<id:\\w*>/<var:\\w*>/<var2:\\w*>', 'verb'=>'DELETE'),\r\n\t\t\r\n\t\tarray('<controller>/restCreate', 'pattern'=>'api/<controller:\\w+>', 'verb'=>'POST'),\r\n\t\tarray('<controller>/restCreate', 'pattern'=>'api/<controller:\\w+>/<id:\\w+>', 'verb'=>'POST'),\r\n\t\t\r\n\t\t'<controller:\\w+>/<id:\\d+>'=>'<controller>/view',\r\n\t\t'<controller:\\w+>/<action:\\w+>/<id:\\d+>'=>'<controller>/<action>',\r\n\t\t'<controller:\\w+>/<action:\\w+>'=>'<controller>/<action>',  \r\n\t);\r\n```\r\n\r\nAlternatively you can choose to use the included routes.php. Then your main.php\r\nconfig for 'urlManager' should look like this:\r\n\r\n```php\r\n'urlManager' => array(\r\n  'urlFormat' => 'path',\r\n  'rules' => require(dirname(__FILE__).'/../extensions/restfullyii/config/routes.php'),\r\n),\r\n```\r\n\r\nSetting up the controller: (This applies to controllers for which you you would\r\nlike to add RESTFull routes) Change your controller class so that it extends\r\nERestController:\r\n\r\n```php\r\nclass PostController extends ERestController {\r\n  ...\r\n}\r\n```\r\n\r\nYou will need to merge your filters & accessRules methods with the parent methods here. To do\r\nthat you simply change the name of these methods by prepending an underscore\r\n(\"\\_\"). So in your controller you will need to change the following:\r\n\r\n```php\r\npublic function filters()\r\n```\r\nbecomes\r\n\r\n```php\r\npublic function _filters()\r\n```\r\n\r\nand\r\n\r\n```php\r\npublic function accessRules()\r\n```\r\n\r\nbecomes\r\n\r\n```php\r\npublic function _accessRules()\r\n```\r\n## Security\r\n\r\nThe 'username' and 'password' are currently hardcoded as Const's in 'ERestController'.\r\n\r\n```php\r\nConst USERNAME = 'admin@restuser';\r\nConst PASSWORD = 'admin@Access'\r\n```\r\nAt a minimum you will want change these values. To create a more secure Auth\r\nsystem modify the 'filterRestAccessRules' method in 'ERestController'. This\r\nshould be straight forward.\r\n\r\nTo use with Javascript you simply need to override the 'validateAjaxUser' method in ERestController with custom logic.\r\n\r\n## Usage\r\n\r\nSample Requests:\r\n\r\n### GET\r\n\r\n```shell\r\n# Listing\r\n$ curl -i -H \"Accept: application/json\" -H \"X_REST_USERNAME: admin@restuser\" -H \"X_REST_PASSWORD: admin@Access\" http://yii-tester.local/api/sample/\r\n\r\n# Viewing\r\n$ curl -l -H \"Accept: application/json\" -H \"X_REST_USERNAME: admin@restuser\" -H \"X_REST_PASSWORD: admin@Access\" http://yii-tester.local/api/sample/174\r\n```\r\n### PUT\r\n\r\n```shell\r\n# Update\r\n$ curl -l -H \"Accept: application/json\" -H \"X_REST_USERNAME: admin@restuser\" -H \"X_REST_PASSWORD: admin@Access\" -H \"X-HTTP-Method-Override: PUT\" -X PUT -d '{\"id\":\"174\",\"name\":\"Five.1 Alive one ever Updated Again\",\"desc\":\"It really is or should be at an honor\",\"notes\":\"this is a note\"}' http://yii-tester.local/api/sample/174\r\n```\r\n\r\n### POST\r\n\r\n```shell\r\n# Create\r\n$ curl -l -H \"Accept: application/json\" -H \"X_REST_USERNAME: admin@restuser\" -H \"X_REST_PASSWORD: admin@Access\" -X POST -d '{\"id\":\"175\",\"name\":\"Six Alive one ever Updated Again\",\"desc\":\"It really is or should be at an honor\",\"notes\":\"this is a note\"}' http://yii-tester.local/api/sample\r\n$ curl -l -H \"Accept: application/json\" -H \"X_REST_USERNAME: admin@restuser\" -H \"X_REST_PASSWORD: admin@Access\" -X POST -d '[{\"id\":\"175\",\"name\":\"Six Alive one ever Updated Again\",\"desc\":\"It really is or should be at an honor\",\"notes\":\"this is a note\"},{\"id\":\"176\",\"name\":\"First.3 one ever Updated Again\",\"desc\":\"It really is or should be at an honor\",\"notes\":\"this is a note\"}]' http://yii-tester.local/api/sample\r\n```\r\n\r\n### Delete\r\n\r\n```shell\r\n$ curl -l -H \"Accept: application/json\" -H \"X_REST_USERNAME: admin@restuser\" -H \"X_REST_PASSWORD: admin@Access\" -H \"X-HTTP-Method-Override: DELETE\" -X DELETE http://yii-tester.local/api/sample/175\r\n```\r\n\r\nYou may also optionally create custom REST methods in your controllers.\r\n\r\nYou must prefix your method with doCustomRest & the verb.\r\n\r\nFor GET request you use doCustomRestGet: EG public function doCustomRestGetOrder($var=null)\r\n\r\n```shell\r\n$ curl -l -H \"Accept: application/json\" -H \"X_REST_USERNAME: admin@restuser\" -H \"X_REST_PASSWORD: admin@Access\" http://yii-tester.local/api/sample/order\r\n$ curl -l -H \"Accept: application/json\" -H \"X_REST_USERNAME: admin@restuser\" -H \"X_REST_PASSWORD: admin@Access\" http://yii-tester.local/api/sample/order/2\r\n```\r\n\r\nSimilarly you can POST' to a custom function. You must prefix your method withdoCustomRestPost(same is true for PUTdoCustomRestPutOrder($data)')\r\n\r\nEG 'public function doCustomRestPostOrder($data)'\r\n\r\n**POST**\r\n\r\n```shell\r\n$ curl -l -H \"Accept: application/json\" -H \"X_REST_USERNAME: admin@restuser\" -H \"X_REST_PASSWORD: admin@Access\" -X POST -d '{\"id\":\"2\",\"order\":\"French Fries\"}' http://yii-tester.local/api/sample/order\r\n\r\n```\r\n**<a name=\"Sub-Resource\"/>Sub-Resources</a>**\r\n  \r\nWhen working with 'many to many' relations you now have the ability to treat them as sub-resources.  \r\n\r\nConsider:  \r\n```\r\nURL Format: http://mysite.com/api/<controller>/<id>/<many_many_relation>/<many_many_relation_id>\r\n\r\nGetting player 3 who is on team 1  \r\nor simply checking whether player 3 is on that team (200 vs. 404)  \r\nGET /team/1/players/3  \r\n\r\ngetting player 3 who is also on team 3  \r\nGET /team/3/players/3  \r\n\r\nAdding player 3 also to team 2  \r\nPUT /team/2/players/3  \r\n\r\nGetting all teams of player 3  \r\nGET /player/3/teams  \r\n\r\nRemove player 3 from team 1 (Injury)\r\nDELETE /team/1/players/3  \r\n\r\nTeam 1 found a replacement, who is not registered in league yet  \r\nPOST /player  \r\n\r\nFrom payload you get back the id, now place it officially to team 1  \r\nPUT /team/1/players/44  \r\n```\r\n\r\n\r\n**Changing Default RestFullYii Behavior**  \r\nTo change behavior of default RESTFul actions you can simply override any of the following methods in your controller:\r\n\r\n```php\r\n public function isPk($pk)\r\n \r\n public function validateAjaxUser($action)\r\n \r\n public function doRestList()\r\n \r\n public function doRestView($id)\r\n \r\n public function doRestViewSubResource($id, $subResource, $subResourceID=null)\r\n  \r\n public function doRestUpdate($id, $data)\r\n \r\n public function doRestUpdateSubResource($id, $subResource, $subResourceID)\r\n  \r\n public function doRestCreate($data)\r\n  \r\n public function doRestDelete($id)\r\n\r\n public function doRestDeleteSubResource($id, $subResource, $subResourceID)\r\n```\r\n\r\n","google":"","name":"Restfullyii"}